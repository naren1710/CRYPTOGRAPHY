#include <stdio.h>
#include <stdint.h>

#define N 16

const uint32_t P[N + 2] = {
    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
    0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
    0x9216d5d9, 0x8979fb1b
};

const uint32_t S[4][256] = {
    {
        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,
        
    },
    {
        
    },
    {
        
    },
    {
        
    }
};

void blowfish_encrypt(uint32_t *xl, uint32_t *xr) {
    uint32_t Xl = *xl;
    uint32_t Xr = *xr;
    uint32_t temp;
    int i;

    for (i = 0; i < N; i++) {
        Xl ^= P[i];
        Xr = (((S[0][(Xl >> 24) & 0xFF] + S[1][(Xl >> 16) & 0xFF]) ^ S[2][(Xl >> 8) & 0xFF]) + S[3][Xl & 0xFF]) ^ Xr;

        temp = Xl;
        Xl = Xr;
        Xr = temp;
    }

    temp = Xl;
    Xl = Xr;
    Xr = temp;

    Xr ^= P[N];
    Xl ^= P[N + 1];

    *xl = Xl;
    *xr = Xr;
}

void blowfish_decrypt(uint32_t *xl, uint32_t *xr) {
    uint32_t Xl = *xl;
    uint32_t Xr = *xr;
    uint32_t temp;
    int i;

    for (i = N + 1; i > 1; i--) {
        Xl ^= P[i];
        Xr = (((S[0][(Xl >> 24) & 0xFF] + S[1][(Xl >> 16) & 0xFF]) ^ S[2][(Xl >> 8) & 0xFF]) + S[3][Xl & 0xFF]) ^ Xr;

        temp = Xl;
        Xl = Xr;
        Xr = temp;
    }

    temp = Xl;
    Xl = Xr;
    Xr = temp;

    Xr ^= P[1];
    Xl ^= P[0];

    *xl = Xl;
    *xr = Xr;
}

int main() {
    uint32_t left = 0x01234567;
    uint32_t right = 0x89abcdef;

    printf("Original data: 0x%08X%08X\n", left, right);

    blowfish_encrypt(&left, &right);
    printf("Encrypted data: 0x%08X%08X\n", left, right);

    blowfish_decrypt(&left, &right);
    printf("Decrypted data: 0x%08X%08X\n", left, right);

    return 0;
}
